from PyQt5.QtWidgets import (
    QMainWindow, QVBoxLayout, QHBoxLayout, QWidget, QTableWidget, QPushButton, QLineEdit,
    QCheckBox, QFileDialog, QTableWidgetItem, QHeaderView
)
from PyQt5.QtCore import Qt
import logging


class AsyncSchedulerWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.resize(700, 300)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")

        # –û—Å–Ω–æ–≤–Ω–æ–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        # –ú–∞–∫–µ—Ç
        layout = QVBoxLayout()
        central_widget.setLayout(layout)

        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á
        self.task_table = QTableWidget(0, 4)  # –ö–æ–ª–æ–Ω–∫–∏: –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫, –ó–∞–ø—É—Å–∫, –°–∫—Ä–∏–ø—Ç, –£–¥–∞–ª–µ–Ω–∏–µ
        self.task_table.setHorizontalHeaderLabels(["AS", "Start", "Script", "X"])
        self.task_table.horizontalHeader().setStretchLastSection(False)
        self.task_table.setVerticalScrollBarPolicy(Qt.ScrollBarAlwaysOn)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É –≤—Å–µ–≥–¥–∞
        layout.addWidget(self.task_table)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö
        self.set_column_widths()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_layout = QHBoxLayout()

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
        add_task_button = QPushButton("Add Task")
        add_task_button.clicked.connect(self.add_task_row)
        button_layout.addWidget(add_task_button)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
        load_button = QPushButton("Load")
        load_button.clicked.connect(self.load_tasks)
        button_layout.addWidget(load_button)

        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        save_button = QPushButton("Save")
        save_button.clicked.connect(self.save_tasks)
        button_layout.addWidget(save_button)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        start_all_button = QPushButton("Start All")
        start_all_button.clicked.connect(self.start_all_tasks)
        button_layout.addWidget(start_all_button)

        # –ö–Ω–æ–ø–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
        stop_all_button = QPushButton("Stop All")
        stop_all_button.clicked.connect(self.stop_all_tasks)
        button_layout.addWidget(stop_all_button)

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–Ω–æ–ø–∫–∞–º–∏
        layout.addLayout(button_layout)

    def set_column_widths(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –æ—Ç —à–∏—Ä–∏–Ω—ã –æ–∫–Ω–∞."""
        column_widths = [3, 10, 83, 3]  # –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        total_width = self.task_table.viewport().width()

        for i, percentage in enumerate(column_widths):
            self.task_table.horizontalHeader().setSectionResizeMode(i, QHeaderView.Fixed)
            self.task_table.setColumnWidth(i, int(total_width * percentage / 100))

    def add_task_row(self):
        row_count = self.task_table.rowCount()
        self.task_table.insertRow(row_count)

        # –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ (–≥–∞–ª–æ—á–∫–∞)
        auto_start_checkbox = QCheckBox()
        auto_start_checkbox.setChecked(False)
        self.task_table.setCellWidget(row_count, 0, auto_start_checkbox)

        # –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ (–∫–Ω–æ–ø–∫–∞)
        run_button = QPushButton("Start")
        run_button.clicked.connect(lambda: self.run_task(row_count))
        self.task_table.setCellWidget(row_count, 1, run_button)

        # –í—ã–±–æ—Ä —Å–∫—Ä–∏–ø—Ç–∞ (—Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥ + –≤—ã–±–æ—Ä —Ñ–∞–π–ª–∞)
        script_widget = self.create_script_widget()
        self.task_table.setCellWidget(row_count, 2, script_widget)

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–∫–Ω–æ–ø–∫–∞)
        delete_button = QPushButton("X")
        delete_button.setStyleSheet("color: black;")
        delete_button.clicked.connect(lambda: self.delete_task_row(row_count))
        self.task_table.setCellWidget(row_count, 3, delete_button)

    def create_script_widget(self):
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        container = QWidget()
        layout = QHBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)

        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
        script_input = QLineEdit()
        script_input.setPlaceholderText("Choose Script...")
        layout.addWidget(script_input)

        # –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        select_button = QPushButton("üìÇ")
        select_button.setFixedSize(30, 30)
        select_button.clicked.connect(lambda: self.select_script_file(script_input))
        layout.addWidget(select_button)

        container.setLayout(layout)
        return container

    def select_script_file(self, line_edit):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self, "Choose Script", "", "Python Scripts (*.json);;All Files (*)"
        )
        if file_path:
            line_edit.setText(file_path)

    def run_task(self, row):
        # –õ–æ–≥–∏–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞
        script_widget = self.task_table.cellWidget(row, 2)
        if script_widget:
            script_input = script_widget.layout().itemAt(0).widget()
            script_path = script_input.text()

            if script_path:
                logging.info(f"Choose Script: {script_path}")
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–∑–æ–≤ –ª–æ–≥–∏–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞
            else:
                logging.warning(f"–°–∫—Ä–∏–ø—Ç –Ω–µ —É–∫–∞–∑–∞–Ω –¥–ª—è —Å—Ç—Ä–æ–∫–∏ {row + 1}")

    def delete_task_row(self, row):
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É."""
        self.task_table.removeRow(row)
        logging.info(f"–°—Ç—Ä–æ–∫–∞ {row + 1} —É–¥–∞–ª–µ–Ω–∞.")

    def load_tasks(self):
        """–õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á."""
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á –∏–∑ —Ñ–∞–π–ª–∞

    def save_tasks(self):
        """–õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á."""
        logging.info("–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á –≤ —Ñ–∞–π–ª

    def start_all_tasks(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        logging.info("–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á...")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á

    def stop_all_tasks(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á."""
        logging.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∑–∞–¥–∞—á...")
        # –ó–¥–µ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á

    def resizeEvent(self, event):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞."""
        super().resizeEvent(event)
        self.set_column_widths()
