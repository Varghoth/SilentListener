const axios = require("axios");

const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;

if (!BOT_TOKEN || !CHAT_ID) {
  console.error("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã TELEGRAM_BOT_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID!");
  process.exit(1);
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
 * @param {string} message - –¢–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 */
async function sendNotification(message) {
  const url = `https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`;
  const data = {
    chat_id: CHAT_ID,
    text: message,
  };

  try {
    const response = await axios.post(url, data);
    console.log("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:", response.data);
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", error.response ? error.response.data : error.message);
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–π HTTP-–∑–∞–ø—Ä–æ—Å –æ —Å—Ç–∞—Ç—É—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
 */
exports.handleStatus = async (req, res) => {
  console.log("üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å:", req.body);

  const { container_id, status } = req.body;

  if (!container_id || !status) {
    console.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π payload");
    return res.status(400).json({ error: "Invalid payload" });
  }

  try {
    if (status === "TemplatePauseMissing") {
      const message = `‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ ${container_id}: Pause –Ω–µ –Ω–∞–π–¥–µ–Ω 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥`;
      await sendNotification(message);
    }

    res.status(200).json({ message: "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω —É—Å–ø–µ—à–Ω–æ" });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error.message);
    res.status(500).json({ error: "Internal Server Error" });
  }
};
